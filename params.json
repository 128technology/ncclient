{"name":"ncclient","tagline":"Python library for NETCONF clients","body":"[![Build Status](https://travis-ci.org/leopoul/ncclient.svg?branch=master)](https://travis-ci.org/leopoul/ncclient)\r\n\r\nncclient: Python library for NETCONF clients\r\n--------------------------------------------\r\n\r\nncclient is a Python library that facilitates client-side scripting\r\nand application development around the NETCONF protocol. `ncclient` was\r\ndeveloped by [Shikar Bhushan](http://schmizz.net). It is now maintained\r\nby [Leonidas Poulopoulos (@leopoul)](http://ncclient.grnet.gr)\r\n\r\nThis version includes a merge of [Juniper Networks](http://www.juniper.net)\r\nand [Cisco Systems](http://www.cisco.com) respective ncclient forks based\r\non [leopoul/ncclient v0.3.2](https://github.com/leopoul/ncclient)\r\n\r\n**Docs**: [http://ncclient.readthedocs.org](http://ncclient.readthedocs.org)\r\n\r\n**PyPI**: [https://pypi.python.org/pypi/ncclient](https://pypi.python.org/pypi/ncclient)\r\n\r\n#### Requirements:\r\n* Python 2.6 <= version < 3.0\r\n* setuptools 0.6+\r\n* Paramiko 1.7+\r\n* lxml 3.0+\r\n* libxml2\r\n* libxslt\r\n\r\nIf you are on Debian/Ubuntu install the following libs (via aptitude or apt-get):\r\n* libxml2-dev\r\n* libxslt1-dev\r\n\r\n#### Installation:\r\n\r\n    [ncclient] $ sudo python setup.py install\r\n    \r\nor via pip:\r\n\r\n    pip install ncclient\r\n\r\n#### Examples:\r\n\r\n    [ncclient] $ python examples/juniper/*.py\r\n\r\n### Usage\r\n#####Get device running config\r\nUse either an interactive Python console (ipython)\r\nor integrate the following in your code:\r\n\r\n    from ncclient import manager\r\n\r\n    with manager.connect(host=host, port=830, username=user, hostkey_verify=False) as m:\r\n        c = m.get_config(source='running').data_xml\r\n        with open(\"%s.xml\" % host, 'w') as f:\r\n            f.write(c)\r\n\r\nAs this version integrates Juniper's and Cisco's forks, lots of new concepts\r\nhave been introduced that ease management of Juniper and Cisco devices respectively.\r\nThe biggest change is the introduction of device handlers in connection paramms.\r\nFor example to invoke Juniper's functions annd params one has to re-write the above with ***device_params={'name':'junos'}***:\r\n\r\n    from ncclient import manager\r\n\r\n    with manager.connect(host=host, port=830, username=user, hostkey_verify=False, device_params={'name':'junos'}) as m:\r\n        c = m.get_config(source='running').data_xml\r\n        with open(\"%s.xml\" % host, 'w') as f:\r\n            f.write(c)\r\n\r\nRespectively, for Cisco Nexus, the name is **nexus**.\r\nDevice handlers are easy to implement and prove to be futureproof.\r\n\r\n### Changes | brief\r\n* Switch between replies if custom handler is found\r\n* Add Juniper, Cisco and default device handlers\r\n* Allow preferred SSH subsystem name in device params\r\n* Allow iteration over multiple SSH subsystem names.\r\n\r\n### Acknowledgements\r\nMany thanks, primarily to [Jeremy Schulman](https://github.com/jeremyschulman) (Juniper) for providing his precious feedback,\r\nto [Ebben Aries](https://github.com/earies) (Juniper) for his contribution, to Juergen Brendel (Cisco) for the Cisco fork and\r\nto all contributors from Cisco and Juniper.\r\n","google":"UA-55440654-1","note":"Don't delete this file! It's used internally to help with page regeneration."}